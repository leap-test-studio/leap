version: '3'

services:
  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./data/zoo1/data:/data
      - ./data/zoo1/datalog:/datalog
    networks:
      vpcbr:
        ipv4_address: 10.5.0.2

  zoo2:
    image: zookeeper:3.4.9
    hostname: zoo2
    ports:
      - 2182:2182
    environment:
      ZOO_MY_ID: 2
      ZOO_PORT: 2182
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./data/zoo2/data:/data
      - ./data/zoo2/datalog:/datalog
    networks:
      vpcbr:
        ipv4_address: 10.5.0.3

  zoo3:
    image: zookeeper:3.4.9
    hostname: zoo3
    ports:
      - 2183:2183
    environment:
      ZOO_MY_ID: 3
      ZOO_PORT: 2183
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./data/zoo3/data:/data
      - ./data/zoo3/datalog:/datalog
    networks:
      vpcbr:
        ipv4_address: 10.5.0.4

  kafka1:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka1
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      vpcbr:
        ipv4_address: 10.5.0.5

  kafka2:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka2
    ports:
      - 9093:9093
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./data/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      vpcbr:
        ipv4_address: 10.5.0.6

  kafka3:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka3
    ports:
      - 9094:9094
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./data/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      vpcbr:
        ipv4_address: 10.5.0.7

  redis:
    image: redis
    ports:
        - 6380:6379
    command: >
      --requirepass automation
    networks:
      vpcbr:
        ipv4_address: 10.5.0.8

  database:
    image: mysql:5.7
    ports:
        - 33061:3306
    command: --init-file /data/application/init.sql
    volumes:
        - ./apps/db-store/src/init.sql:/data/application/init.sql
    environment:
        MYSQL_ROOT_USER: root
        MYSQL_ROOT_PASSWORD: S3cret
        MYSQL_DATABASE: automation
        MYSQL_USER: automation
        MYSQL_PASSWORD: S3cret
    networks:
      vpcbr:
        ipv4_address: 10.5.0.9

  service-engine:
    container_name: vinashak-engine
    build:
      context: .
      dockerfile: apps/engine/Dockerfile
      args:
        NODE_ENV: production
    image: "vinashak-engine:latest"
    restart: always
    networks:
      vpcbr:
        ipv4_address: 10.5.0.10
    depends_on:
      - database
    environment:
      - DATABASE_HOST=database
      - DATABASE_DIALECT=mysql
      - DATABASE_NAME=automation
      - DATABASE_USERNAME=automation
      - DATABASE_PASSWORD=S3cret
      - DATABASE_PORT=33061
      - DATABASE_LOGGING=false
    ports:
      - 5002:5002

  service-scheduler:
    container_name: vinashak-scheduler
    build:
      context: .
      dockerfile: apps/service-scheduler/Dockerfile
      args:
        NODE_ENV: production
    image: "vinashak-scheduler:latest"
    restart: always
    networks:
      vpcbr:
        ipv4_address: 10.5.0.11
    depends_on:
      - database
    environment:
      - DATABASE_HOST=database
      - DATABASE_DIALECT=mysql
      - DATABASE_NAME=automation
      - DATABASE_USERNAME=automation
      - DATABASE_PASSWORD=S3cret
      - DATABASE_PORT=33061
      - DATABASE_LOGGING=false
    ports:
      - 5002:5002

  service:
    container_name: vinashak-api
    build:
      context: .
      dockerfile: apps/service/Dockerfile
      args:
        NODE_ENV: production
    image: "vinashak-api:latest"
    restart: always
    networks:
      vpcbr:
        ipv4_address: 10.5.0.12
    depends_on:
      - redis
      - database
      - service-engine
    environment:
      - DATABASE_HOST=database
      - DATABASE_DIALECT=mysql
      - DATABASE_NAME=automation
      - DATABASE_USERNAME=automation
      - DATABASE_PASSWORD=S3cret
      - DATABASE_PORT=33061
      - DATABASE_LOGGING=false
      - ENGINE_URL=http://service-engine:5002/api/v1/runner
      - SECRET=551531dca26542b188cb3803ab4de7b9
      - PUBLIC_URL=http://service:5001
      - OTP_EXPIRY_TIME=5m
      - REFRESH_TOKEN_EXPIRY=1d
      - JWT_TOKEN_EXPIRY=10m
      - CLIENT_NAME=Vinashak Automation Suite
      - REDIS_HOST=redis
      - REDIS_PORT=6380
      - REDIS_PASSWORD=automation
      - SMTP_FROM=yuvarajsomavamshi@gmail.com
      - SMTP_HOST=smtp.googlemail.com
      - SMTP_PORT=465
      - SMTP_USER=yuvarajsomavamshi@gmail.com
      - SMTP_PASSWORD=NanduBujji@143
    ports:
      - 5001:5001

  service-web:
    container_name: vinashak-web
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        NODE_ENV: production
    image: "vinashak-web:latest"
    restart: always
    networks:
      vpcbr:
        ipv4_address: 10.5.0.13
    depends_on:
      - service
    environment:
      - APIGW=http://service:5001
    ports:
      - 8080:8080

volumes:
  dbdata:

networks:
  vpcbr:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/16
         gateway: 10.5.0.1
